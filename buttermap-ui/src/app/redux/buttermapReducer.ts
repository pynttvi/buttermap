import {createSlice, PayloadAction} from '@reduxjs/toolkit';
import type {AppDispatch} from './buttermapStore';
import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';

import {ButtermapState, initialMapState} from "@/app/redux/buttermapState";

import {MapMode} from "@/app/model/common";
import {CoordinateChange, FullCoordinate, SimpleCoordinate} from "@/app/model/coordinate";
import {ChangeFile} from "@/app/views/updatesList";
import {RouteResult} from "@/app/map/mapRoute";
import {Area} from "@/app/model/area";
import {PersistedData} from "@/app/service/common";
import {createRandomId} from "@/app/utils";

export const useAppDispatch: () => AppDispatch = useDispatch;
export const useAppSelector: TypedUseSelectorHook<ButtermapState> = useSelector;

export interface Toast {
    id: string;
    message: string;
    type: "success" | "error" | "info" | "warning";
}

// Create a slice of state

const buttermapStateSlice = createSlice({
    name: 'buttermap',
    initialState: initialMapState,
    reducers: {
        setIsLogged: (state: ButtermapState, action: PayloadAction<boolean>) => {
            state.isLogged = action.payload
        },
        setUse3D: (state: ButtermapState, action: PayloadAction<boolean>) => {
            state.settings.use3D = action.payload;
        },
        setAvoidWater: (state: ButtermapState, action: PayloadAction<boolean>) => {
            state.settings.avoidWater = action.payload;
        },
        setMode: (state: ButtermapState, action: PayloadAction<MapMode>) => {
            state.settings.mapMode = action.payload;
        },
        setHighlightedCoords: (state: ButtermapState, action: PayloadAction<SimpleCoordinate[]>) => {
            state.highlightedCoords = action.payload;
        },
        setEditModalOpen: (state: ButtermapState, action: PayloadAction<boolean>) => {
            state.editModalOpen = action.payload;
        },
        setViewModalOpen: (state: ButtermapState, action: PayloadAction<boolean>) => {
            state.viewModalOpen = action.payload;
        },
        setAreaModalOpen: (state: ButtermapState, action: PayloadAction<boolean>) => {
            state.areaModalOpen = action.payload;
        },
        setChanges: (state: ButtermapState, action: PayloadAction<CoordinateChange[]>) => {
            state.changes = action.payload;
        },
        setActiveChange: (state: ButtermapState, action: PayloadAction<ChangeFile | null>) => {
            state.activeChange = action.payload;
        },
        setActiveRoute: (state: ButtermapState, action: PayloadAction<RouteResult | null>) => {
            state.activeRoute = action.payload;
        },
        setActiveCoordinate: (state: ButtermapState, action: PayloadAction<FullCoordinate | null>) => {
            state.activeCoordinate = action.payload;
        },
        setActiveArea: (state: ButtermapState, action: PayloadAction<Area | null>) => {
            state.activeArea = action.payload;
        },
        resetState: () => {
            return initialMapState
        },
        addToast: (state, action: PayloadAction<Toast>) => {
            state.toasts.push(action.payload);
        },
        removeToast: (state, action: PayloadAction<string>) => {
            state.toasts = state.toasts.filter((toast: Toast) => toast.id !== action.payload);
        },

        setPersistedData: (state: ButtermapState, action: PayloadAction<PersistedData | null>) => {
            state.persistedData = action.payload;
        },
        showToast: (state: ButtermapState, action: PayloadAction<Omit<Toast, "id">>) => {
            const id = createRandomId()
            addToast({id, ...action.payload})
            setTimeout(() => {
                removeToast(id)
            }, 2000)
        }
    }
});

// Export actions generated by createSlice
export const {
    setIsLogged,
    setUse3D,
    setAvoidWater,
    setMode,
    setHighlightedCoords,
    setEditModalOpen,
    setViewModalOpen,
    setAreaModalOpen,
    setChanges,
    setActiveChange,
    setActiveRoute,
    setActiveCoordinate,
    setActiveArea,
    resetState,
    addToast,
    removeToast,
    setPersistedData,
    showToast
} = buttermapStateSlice.actions;


// Export the reducer to be used in the store configuration
export default buttermapStateSlice.reducer;
